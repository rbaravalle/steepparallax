<!DOCTYPE html>

<html>

<head>

<script type="text/javascript" src="js/Stats.js"></script>
<script type="text/javascript" src="js/Three.js"></script>

<script id="vertexShader" type="x-shader/x-fragment">
	
	uniform vec3 LightSource;
	
	attribute vec4 tangent;

	varying vec2 vUv;
	varying vec3 vPosition;
	
	varying vec3 vNormal;
	varying vec3 vTangent;
	varying vec3 vBinormal;
	
	varying vec3 tsPosition;
	varying vec3 tsCameraPosition;
	varying vec3 tsLightSource;
	
	void main( void ) {
		
		vUv = uv;
		vPosition = position;
		
		gl_Position = projectionMatrix * modelViewMatrix * vec4(vPosition, 1.0);
		
		// Find & normalize the plane's normal, tangent, and binormal vectors
		vNormal = normalize( normal );
		vTangent = normalize( tangent.xyz );
		vBinormal = normalize( cross( vNormal, vTangent ) * tangent.w );
		
		// Convert vertice, camera, and light vector positions into tangent space
		mat3 TBNMatrix = mat3(vTangent, vBinormal, vNormal);
		tsPosition = position * TBNMatrix;
		tsCameraPosition = cameraPosition * TBNMatrix;
		tsLightSource = LightSource * TBNMatrix;
		
	}
	
</script>

<script id="fragmentShader" type="x-shader/x-vertex">
	
	uniform sampler2D base;
	uniform sampler2D map;
	
	uniform vec3 ambientColor;
	uniform vec3 diffuseColor;
	uniform vec3 specularColor;
	uniform float shininess;
	uniform float scale;
	uniform float shadow;
	
	varying vec3 vNormal;
	varying vec3 vTangent;
	varying vec3 vBinormal;
	
	varying vec3 vPosition;
	varying vec2 vUv;
	
	varying vec3 tsPosition;
	varying vec3 tsCameraPosition;
	varying vec3 tsLightSource;
	
	void main()
	{
		float bumpScale = scale;
		
		// normalize the other tangent space vectors
		vec3 viewVector = normalize(tsCameraPosition - tsPosition);
		vec3 lightVector = normalize(tsLightSource - tsPosition);
		
		vec3 tsE = normalize(tsCameraPosition);

		const float numSteps = 30.0;
		float height = 1.0;
		float step = 1.0 / numSteps;

		vec2 offset = vUv;
		vec4 NB = texture2D(map, offset);

		vec2 delta = vec2(-tsE.x, -tsE.y) * bumpScale / (tsE.z * numSteps);

		for (float i = 0.0; i < numSteps; i++) {
			if (NB.a < height) {
				height -= step;
				offset += delta;
				NB = texture2D(map, offset);
			} else {
				break;
			}
		}
		
		vec3 color = texture2D(base, offset).rgb;
        
        
        	vec3 normal = texture2D(map, offset).rgb * 2.0 - 1.0;
	
	        float nxDir = max(0.0, dot(normal, lightVector));
	        vec3 ambient = ambientColor * color;
	
	        float specularPower = 0.0;
	        if(nxDir != 0.0)
	        {
	                vec3 halfVector = normalize(lightVector + viewVector);
	                float nxHalf = max(0.0, dot(normal, halfVector));
	                specularPower = pow(nxHalf, shininess);
	        }
	        vec3 specular = specularColor * specularPower;
        
        
        	vec3 pixel_color = ambient + (diffuseColor * nxDir * color) + specular;
        
        	if (shadow == 1.0) {
	        	vec2 shadow_offset = offset;
			vec3 tsH = normalize(lightVector + tsE);
			float NdotL = max(0.0, dot(normal, lightVector));
			
			float selfShadow = 0.0;
			
			if (NdotL > 0.0) {
				
				const float numShadowSteps = 30.0;
				step = 1.0 / numShadowSteps;
				delta = vec2(lightVector.x, lightVector.y) * bumpScale / (numShadowSteps * lightVector.z);
				
				height = NB.a + step * .1;
				
				for (float i = 0.0; i < numShadowSteps; i++) {
					if (NB.a < height && height < 1.0) {
						height += step;
						shadow_offset += delta;
						NB = texture2D(map, shadow_offset);
					} else {
						break;
					}
				}
				
				selfShadow = float(NB.a < height);
				
			}
			
			if (selfShadow == 0.0) {
				pixel_color *= .5;
			}
		}
		
		gl_FragColor = vec4(pixel_color, 1.0);
		
		if (offset.x < 0.0 || offset.x > 1.0 || offset.y < 0.0 || offset.y > 1.0) {
			gl_FragColor.a = 0.0;
		}
	}

</script>

<script type="text/javascript">

// http://paulirish.com/2011/requestanimationframe-for-smart-animating/
// shim layer with setTimeout fallback
window['requestAnimFrame'] = (function(){
  return  window.requestAnimationFrame       || 
          window.webkitRequestAnimationFrame || 
          window.mozRequestAnimationFrame    || 
          window.oRequestAnimationFrame      || 
          window.msRequestAnimationFrame     || 
          function(/* function */ callback, /* DOMElement */ element){
            window.setTimeout(callback, 1000 / 60);
          };
})();

function Degrees2Radians(degrees) {
	return degrees * (Math.PI / 180)
};

var settings = {
	ambientColor: { x: .6, y: .6, z: .6 },
	diffuseColor: { x: .7, y: .7, z: .7 },
	specularColor: { x: .3, y: .3, z: .3 },
	shininess: 5,
	scale: .04,
	shadow: 1,
};

window.onload = function() {

    THREE.Clock = function ( autoStart ) {

	    this.autoStart = ( autoStart !== undefined ) ? autoStart : true;

	    this.startTime = 0;
	    this.oldTime = 0;
	    this.elapsedTime = 0;

	    this.running = false;

    };

    THREE.Clock.prototype.start = function () {

	    this.startTime = Date.now();
	    this.oldTime = this.startTime;

	    this.running = true;

    };

    THREE.Clock.prototype.stop = function () {

	    this.getElapsedTime();

	    this.running = false;

    };

    THREE.Clock.prototype.getElapsedTime = function () {

	    this.elapsedTime += this.getDelta();

	    return this.elapsedTime;

    };


    THREE.Clock.prototype.getDelta = function () {

	    var diff = 0;

	    if ( this.autoStart && ! this.running ) {

		    this.start();

	    }

	    if ( this.running ) {

		    var newTime = Date.now();
		    diff = 0.001 * ( newTime - this.oldTime );
		    this.oldTime = newTime;

		    this.elapsedTime += diff;

	    }

	    return diff;

    };
	
	var view_width = window.innerWidth;
	var view_height = window.innerHeight;

	var clock = new THREE.Clock();
	
	var renderer = new THREE.WebGLRenderer({antialias: true});
	renderer.setSize(view_width, view_height);
	document.getElementById('viewport').appendChild(renderer.domElement);
	
	renderer.domElement.onmousemove = function(e) {
		camera.position.x = (e.clientX / view_width) * 40 - 20;
		camera.position.y = (-e.clientY / view_height) * 40 + 20;
	};
	
	var projector = new THREE.Projector();
	
	var scene = new THREE.Scene();
	
	var camera = new THREE.Camera(
		35,
		view_width / view_height,
		1,
		10000
	);
	camera.position.set(0, 0, 10);
	
	var textures = {
		lion: THREE.ImageUtils.loadTexture( 'lion.png' ),
		//lionbump: THREE.ImageUtils.loadTexture( 'lion-bump.png' ),
		//lionnormal: THREE.ImageUtils.loadTexture( 'lion-normal.png' ),
		lionbumpnormal: THREE.ImageUtils.loadTexture( 'lion-bumpnormal.png' )
	};

    var time = Date.now() * 0.005;

	x = Math.sin( time * 0.7 ) * 15;
	y = Math.cos( time * 0.7 ) * 15;
	z = Math.cos( time * 0.7 ) * 15;

    var mat = new THREE.MeshBasicMaterial();
    mat.color = new THREE.Vector3(1.0,0,0);

    light1 = new THREE.PointLight( 0xff0040, 2, 50 );
	scene.addChild( light1 );

    var sphere = new THREE.SphereGeometry( 0.5, 16, 8 );
    var l1 = new THREE.Mesh( sphere, new THREE.MeshBasicMaterial( { color: 0xff0040 } ) );
    l1.position = light1.position;
    scene.addChild( l1 );

    //sphere = new THREE.Mesh(new THREE.SphereGeometry(x,y,z), mat);
    //sphere.overdraw = true;
    //scene.addChild(sphere);

	
	var plane = new THREE.Mesh(
		new THREE.PlaneGeometry(10, 10),
		new THREE.MeshShaderMaterial({
			uniforms: {
				base: { type: 't', value: 0, texture: textures.lion },
				map: { type: 't', value: 1, texture: textures.lionbumpnormal },
				LightSource: { type: 'v3', value: {x: x , y: y, z: z} },
				ambientColor: { type: 'v3', value: settings.ambientColor },
				diffuseColor: { type: 'v3', value: settings.diffuseColor },
				specularColor: { type: 'v3', value: settings.specularColor },
				shininess: { type: 'f', value: settings.shininess },
				scale: { type: 'f', value: settings.scale },
				shadow: { type: 'f', value: settings.shadow }
			},
			vertexShader: document.getElementById( 'vertexShader' ).textContent,
			fragmentShader: document.getElementById( 'fragmentShader' ).textContent
		})
	);
	window.planeMaterial = plane.materials[0];
	plane.geometry.computeVertexNormals();
	plane.geometry.computeTangents();
	scene.addChild(plane);
	
	
	var render = function render() {

		renderer.render(scene, camera);
	};
	
	var main = function main() {
		
		window.planeMaterial.uniforms.shininess.value = settings.shininess;
		window.planeMaterial.uniforms.scale.value = settings.scale;
		window.planeMaterial.uniforms.shadow.value = settings.shadow;

        var time = Date.now() * 0.0004;

	    x = Math.sin( time * 0.7 ) * 11;
	    y = Math.cos( time * 0.7 ) * 11;
	    z = Math.cos( time * 0.7 ) * 11;

		light1.position.x = x
		light1.position.y = y
		light1.position.z = z

	
        window.planeMaterial.uniforms.LightSource.value={x:x,y:y,z:z};
        str = "X: " + x + "Y: " + y+"Z: " + z
		render();
		stats.update();
		window.requestAnimFrame(main);
		
	};
	
	var stats = new Stats();
	stats.domElement.style.position = 'absolute';
	stats.domElement.style.top = '0';
	stats.domElement.style.zIndex = 100;
	document.body.appendChild(stats.domElement);
	
	requestAnimFrame(main);
}
</script>


<title>Steep Parallax WebGL Shader</title>

<style type="text/css">
	html, body, div {
		margin: 0;
		padding: 0;
	}
	
	#viewport {
		height: 100%;
		width: 100%;
	}
	
	#settings {
		position: absolute;
		top: 50px;
		background-color: #DDD;
		z-index: 1;
		font-size: 8pt;
		padding: 7px;
	}
	#settings input {
		width: 20px;
		font-size: 8pt;
	}
</style>

</head>

<body>
	<div id="settings">
		<strong>Ambient Color:</strong> r <input type="text" value=".6" onchange="settings.ambientColor.x = parseFloat(this.value);" /> g <input type="text" value=".6" onchange="settings.ambientColor.y = parseFloat(this.value);" /> b <input type="text" value=".6" onchange="settings.ambientColor.z = parseFloat(this.value);" />
		<br />
		<strong>Diffuse Color:</strong> r <input type="text" value=".7" onchange="settings.diffuseColor.x = parseFloat(this.value);" /> g <input type="text" value=".7" onchange="settings.diffuseColor.y = parseFloat(this.value);" /> b <input type="text" value=".7" onchange="settings.diffuseColor.z = parseFloat(this.value);" />
		<br />
		<strong>Specular Color:</strong> r <input type="text" value=".3" onchange="settings.specularColor.x = parseFloat(this.value);" /> g <input type="text" value=".3" onchange="settings.specularColor.y = parseFloat(this.value);" /> b <input type="text" value=".3" onchange="settings.specularColor.z = parseFloat(this.value);" />
		<br />
		<strong>Shininess:</strong> <input type="text" value="5" onchange="settings.shininess = parseFloat(this.value);" />
		<br />
		<strong>Scale:</strong> <input type="text" value=".04" onchange="settings.scale = parseFloat(this.value);" />
		<br />
		<strong>Self-Shadow:</strong> <input type="checkbox" checked="checked" onchange="settings.shadow = this.checked ? 1 : 0" />
		<br /><br />
		<p>
			by <a href="http://chandler.prallfamily.com" target="_blank" title="Chandler Prall's blog" alt="Chandler Prall's blog">Chandler Prall</a>
			<br /><br />
			image from Morgan McGuire and Max McGuire's<br /><a href="http://graphics.cs.brown.edu/games/SteepParallax/index.html" target="_blank">steep parallax</a> example
		</p>
        Posicion de la luz<p id="xyz"></P>
	</div>
	<div id="viewport"></div>
	
</body>

</html>
